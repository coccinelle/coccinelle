OCAMLFLAGS+=-I $(SRC_DIR)
OCAMLC_CMD= \
	$(OCAMLC) $(OCAMLCFLAGS) $(OCAMLFLAGS) \
	$(EXTRACFLAGS)
OCAMLOPT_CMD= \
	$(OCAMLOPT) $(OCAMLOPTFLAGS) $(OCAMLFLAGS) \
	$(EXTRACFLAGS)
OCAMLMKLIB_CMD=$(OCAMLMKLIB) -linkall $(EXTRALNKFLAGS)
OCAMLDEP_CMD=$(OCAMLDEP) $(OCAMLDEPFLAGS) $(OCAMLFLAGS)

OCAMLC_LDFLAGS = $(patsubst %,-custom -cclib -l%_stubs,$(LIBRARY)) \
	$(addprefix -cclib -l,$(C_LIBS))
OCAMLOPT_LDFLAGS = $(patsubst %,-cclib -l%_stubs,$(LIBRARY)) \
	$(addprefix -cclib -l,$(C_LIBS))

OCAMLCCFLAGS+=-ccopt -fPIC

SIDEPRODUCTS+= \
	$(INTERFACES:=.cmi) \
	$(patsubst %,lib%_stubs.a,$(LIBRARY))

all: depend
	@$(MAKE) all-build
all-build: all-build-targets $(OTHERS)
all-build-targets: \
	$(addsuffix .cma,$(ARCHIVE)) \
	$(SIDEPRODUCTS) \
	$(SIDEPRODUCTS_BYTECODE) \
	$(patsubst %,dll%_stubs.so,$(LIBRARY))

define foreach_file_to_copy_from_src
$(file) : $(SRC_DIR)/$(file)
	cp $$< $$@
endef

$(foreach file, \
	$(addsuffix .cma, $(ARCHIVE)) \
	$(addsuffix .cmxa, $(ARCHIVE)) \
	$(addsuffix .cmx, $(INTERFACES)) \
	$(addsuffix .a, $(LIBRARY)) \
	$(SIDEPRODUCTS) \
	$(SIDEPRODUCTS_NATIVE) \
	$(SIDEPRODUCTS_BYTECODE) \
	$(patsubst %,dll%_stubs.so,$(LIBRARY)), \
	$(eval $(foreach_file_to_copy_from_src)))

all.opt: depend
	@$(MAKE) all-opt-build
all-opt-build: all-opt-build-targets $(OTHERS)
all-opt-build-targets: \
	$(addsuffix .cmxa,$(ARCHIVE)) \
	$(addsuffix .cmx,$(INTERFACES)) \
	$(addsuffix .a,$(LIBRARY)) \
	$(SIDEPRODUCTS) \
	$(SIDEPRODUCTS_NATIVE) \
	$(patsubst %,dll%_stubs.so,$(LIBRARY))

clean:
	rm -f .depend $(ARCHIVE:=.cma) $(ARCHIVE:=.cmxa) \
		$(SIDEPRODUCTS) $(SIDEPRODUCTS_NATIVE) \
		$(SIDEPRODUCTS_BYTECODE) \
		$(INTERFACES:=.cmx) $(LIBRARY:=.a) $(CLEANOTHERS) \
		$(patsubst %,$(SRC_DIR)/%.mli,$(PRODUCTS)) \
		$(patsubst %,$(SRC_DIR)/%.ml,$(PRODUCTS)) $(OTHERS) \
		$(patsubst %,dll%_stubs.so,$(LIBRARY)) \
		$(patsubst %,$(SRC_DIR)/dll%_stubs.so,$(LIBRARY)) \
		$(patsubst %,$(SRC_DIR)/%.a,$(LIBRARY)) \
		$(patsubst %,$(SRC_DIR)/lib%_stubs.a,$(LIBRARY)) \
		$(patsubst %,$(SRC_DIR)/%.o,$(MODULES)) \
		$(patsubst %,$(SRC_DIR)/%.cmi,$(MODULES)) \
		$(patsubst %,$(SRC_DIR)/%.cmx,$(MODULES)) \
		$(patsubst %,$(SRC_DIR)/%.cmo,$(MODULES)) \
		$(patsubst %,$(SRC_DIR)/%.cmt,$(MODULES)) \
		$(patsubst %,$(SRC_DIR)/%.cmti,$(MODULES)) \
		$(patsubst %,$(SRC_DIR)/%.cma,$(ARCHIVE)) \
		$(patsubst %,$(SRC_DIR)/%.cmxa,$(ARCHIVE)) \
		$(patsubst %,$(SRC_DIR)/%.cmi,$(MERE_INTERFACES)) \
		$(patsubst %,$(SRC_DIR)/%.cmti,$(MERE_INTERFACES))

depend: .depend

yacc_files := $(wildcard $(patsubst %,$(SRC_DIR)/%.mly,$(MODULES)))
lex_files := $(wildcard $(patsubst %,$(SRC_DIR)/%.mll,$(MODULES)))

source_files := \
	$(wildcard $(patsubst %,$(SRC_DIR)/%.mli,$(MODULES))) \
	$(patsubst %,$(SRC_DIR)/%.mli,$(MERE_INTERFACES)) \
	$(wildcard $(patsubst %,$(SRC_DIR)/%.ml,$(MODULES))) \
	$(patsubst %.mly,%.ml,$(yacc_files)) \
	$(patsubst %.mly,%.mli,$(yacc_files)) \
	$(patsubst %.mll,%.ml,$(lex_files)) \
        $(GENERATED_SOURCE_FILES)

.PHONY: depend-rec
depend-rec: $(source_files)
	$(OCAMLDEP_CMD) $(source_files) >.depend

.depend:
	$(MAKE) depend-rec

.PHONY: \
	all all-build all-build-targets all.opt all-opt-build \
	all-opt-build-targets clean distclean depend

$(SRC_DIR)/$(ARCHIVE).cma: \
		$(add_suffix ($add_prefix $(LIBRARY),$(SRC_DIR)/dll),_stubs.so)\
		$(patsubst %,$(SRC_DIR)/%.cmo,$(OBJS))
	$(OCAMLC_CMD) $(OCAMLC_LDFLAGS) -a $^ -o $@

$(SRC_DIR)/$(ARCHIVE).cmxa: \
		$(add_suffix ($add_prefix $(LIBRARY),$(SRC_DIR)/dll),_stubs.so)\
		$(patsubst %,$(SRC_DIR)/%.cmx,$(OBJS))
	$(OCAMLOPT_CMD) $(OCAMLOPT_LDFLAGS) -a $^ -o $@

$(SRC_DIR)/$(ARCHIVE).a : $(SRC_DIR)/$(ARCHIVE).cmxa

$(SRC_DIR)/lib$(LIBRARY)_stubs.a : \
	$(patsubst %,$(SRC_DIR)/%_stubs.o,$(C_OBJS))
	$(OCAMLMKLIB_CMD) -o $(SRC_DIR)/$(LIBRARY)_stubs $^

$(SRC_DIR)/dll$(LIBRARY)_stubs.so: $(SRC_DIR)/lib$(LIBRARY)_stubs.a

%.ml: %.mll
	$(OCAMLLEX) $< -o $@

%.ml %.mli: %.mly
	$(OCAMLYACC) $<

%.cmi: %.mli
	$(OCAMLC_CMD) -c $< -o $@

%.cmo: %.ml
	$(OCAMLC_CMD) $(OCAML_BUNDLES_FLAGS) -c $< -o $@

%.cmx: %.ml
	$(OCAMLOPT_CMD) $(OCAML_BUNDLES_FLAGS) -c $< -o $@

define bundle_without_mli
ifeq ($(wildcard $(SRC_DIR)/$(SOURCE).mli),)
ifeq ($(OCAMLOPT),)
$(SRC_DIR)/$(SOURCE).cmi: $(SRC_DIR)/$(SOURCE).cmo
else
$(SRC_DIR)/$(SOURCE).cmo: $(SRC_DIR)/$(SOURCE).cmx
$(SRC_DIR)/$(SOURCE).cmi: $(SRC_DIR)/$(SOURCE).cmx
endif
endif
endef

$(foreach SOURCE,$(MODULES),$(eval $(bundle_without_mli)))

%.o: %.c
	$(OCAMLC_CMD) $(OCAMLCCFLAGS) $< -o $@
# Workaround for what looks like a bug with object compilation...
	- mv $(notdir $@) $@

ifneq ($(MAKECMDGOALS),clean)
ifneq ($(MAKECMDGOALS),distclean)
include ../../Makefile.config
-include ../../Makefile.local
endif
endif

ifeq ($(MAKECMDGOALS),all-build)
include .depend
endif

ifeq ($(MAKECMDGOALS),all-opt-build)
include .depend
endif
